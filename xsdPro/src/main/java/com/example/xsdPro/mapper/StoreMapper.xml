<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.xsdPro.dao.StoreMapper">
  <resultMap id="BaseResultMap" type="com.example.xsdPro.model.Store">
    <constructor>
      <idArg column="company_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <idArg column="branch_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <idArg column="store_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="store_code" javaType="java.lang.String" jdbcType="NCHAR" />
      <arg column="store_name" javaType="java.lang.String" jdbcType="NCHAR" />
      <arg column="store_type_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="negative_flag" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="address" javaType="java.lang.String" jdbcType="NCHAR" />
      <arg column="remark" javaType="java.lang.String" jdbcType="NCHAR" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    company_id, branch_id, store_id, store_code, store_name, store_type_id, negative_flag, 
    address, remark
  </sql>
  <select id="selectByExample" parameterType="com.example.xsdPro.model.StoreExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tbl_store
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="com.example.xsdPro.model.StoreKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tbl_store
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.example.xsdPro.model.StoreKey">
    delete from tbl_store
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.xsdPro.model.Store">
    insert into tbl_store (company_id, branch_id, store_id, 
      store_code, store_name, store_type_id, 
      negative_flag, address, remark
      )
    values (#{companyId,jdbcType=INTEGER}, #{branchId,jdbcType=INTEGER}, #{storeId,jdbcType=INTEGER}, 
      #{storeCode,jdbcType=NCHAR}, #{storeName,jdbcType=NCHAR}, #{storeTypeId,jdbcType=INTEGER}, 
      #{negativeFlag,jdbcType=BIT}, #{address,jdbcType=NCHAR}, #{remark,jdbcType=NCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.xsdPro.model.Store">
    insert into tbl_store
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="companyId != null">
        company_id,
      </if>
      <if test="branchId != null">
        branch_id,
      </if>
      <if test="storeId != null">
        store_id,
      </if>
      <if test="storeCode != null">
        store_code,
      </if>
      <if test="storeName != null">
        store_name,
      </if>
      <if test="storeTypeId != null">
        store_type_id,
      </if>
      <if test="negativeFlag != null">
        negative_flag,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="companyId != null">
        #{companyId,jdbcType=INTEGER},
      </if>
      <if test="branchId != null">
        #{branchId,jdbcType=INTEGER},
      </if>
      <if test="storeId != null">
        #{storeId,jdbcType=INTEGER},
      </if>
      <if test="storeCode != null">
        #{storeCode,jdbcType=NCHAR},
      </if>
      <if test="storeName != null">
        #{storeName,jdbcType=NCHAR},
      </if>
      <if test="storeTypeId != null">
        #{storeTypeId,jdbcType=INTEGER},
      </if>
      <if test="negativeFlag != null">
        #{negativeFlag,jdbcType=BIT},
      </if>
      <if test="address != null">
        #{address,jdbcType=NCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=NCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.xsdPro.model.StoreExample" resultType="java.lang.Integer">
    select count(*) from tbl_store
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tbl_store
    <set>
      <if test="record.companyId != null">
        company_id = #{record.companyId,jdbcType=INTEGER},
      </if>
      <if test="record.branchId != null">
        branch_id = #{record.branchId,jdbcType=INTEGER},
      </if>
      <if test="record.storeId != null">
        store_id = #{record.storeId,jdbcType=INTEGER},
      </if>
      <if test="record.storeCode != null">
        store_code = #{record.storeCode,jdbcType=NCHAR},
      </if>
      <if test="record.storeName != null">
        store_name = #{record.storeName,jdbcType=NCHAR},
      </if>
      <if test="record.storeTypeId != null">
        store_type_id = #{record.storeTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.negativeFlag != null">
        negative_flag = #{record.negativeFlag,jdbcType=BIT},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=NCHAR},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=NCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tbl_store
    set company_id = #{record.companyId,jdbcType=INTEGER},
      branch_id = #{record.branchId,jdbcType=INTEGER},
      store_id = #{record.storeId,jdbcType=INTEGER},
      store_code = #{record.storeCode,jdbcType=NCHAR},
      store_name = #{record.storeName,jdbcType=NCHAR},
      store_type_id = #{record.storeTypeId,jdbcType=INTEGER},
      negative_flag = #{record.negativeFlag,jdbcType=BIT},
      address = #{record.address,jdbcType=NCHAR},
      remark = #{record.remark,jdbcType=NCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.xsdPro.model.Store">
    update tbl_store
    <set>
      <if test="storeCode != null">
        store_code = #{storeCode,jdbcType=NCHAR},
      </if>
      <if test="storeName != null">
        store_name = #{storeName,jdbcType=NCHAR},
      </if>
      <if test="storeTypeId != null">
        store_type_id = #{storeTypeId,jdbcType=INTEGER},
      </if>
      <if test="negativeFlag != null">
        negative_flag = #{negativeFlag,jdbcType=BIT},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=NCHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=NCHAR},
      </if>
    </set>
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.xsdPro.model.Store">
    update tbl_store
    set store_code = #{storeCode,jdbcType=NCHAR},
      store_name = #{storeName,jdbcType=NCHAR},
      store_type_id = #{storeTypeId,jdbcType=INTEGER},
      negative_flag = #{negativeFlag,jdbcType=BIT},
      address = #{address,jdbcType=NCHAR},
      remark = #{remark,jdbcType=NCHAR}
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.example.xsdPro.model.Store">
    <constructor>
      <idArg column="company_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <idArg column="branch_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <idArg column="store_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="store_code" javaType="java.lang.String" jdbcType="NCHAR" />
      <arg column="store_name" javaType="java.lang.String" jdbcType="NCHAR" />
      <arg column="store_type_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="negative_flag" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="address" javaType="java.lang.String" jdbcType="NCHAR" />
      <arg column="remark" javaType="java.lang.String" jdbcType="NCHAR" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    company_id, branch_id, store_id, store_code, store_name, store_type_id, negative_flag, 
    address, remark
  </sql>
  <select id="selectByExample" parameterType="com.example.xsdPro.model.StoreExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tbl_store
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="com.example.xsdPro.model.StoreKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tbl_store
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.example.xsdPro.model.StoreKey">
    delete from tbl_store
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.xsdPro.model.Store">
    insert into tbl_store (company_id, branch_id, store_id, 
      store_code, store_name, store_type_id, 
      negative_flag, address, remark
      )
    values (#{companyId,jdbcType=INTEGER}, #{branchId,jdbcType=INTEGER}, #{storeId,jdbcType=INTEGER}, 
      #{storeCode,jdbcType=NCHAR}, #{storeName,jdbcType=NCHAR}, #{storeTypeId,jdbcType=INTEGER}, 
      #{negativeFlag,jdbcType=BIT}, #{address,jdbcType=NCHAR}, #{remark,jdbcType=NCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.xsdPro.model.Store">
    insert into tbl_store
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="companyId != null">
        company_id,
      </if>
      <if test="branchId != null">
        branch_id,
      </if>
      <if test="storeId != null">
        store_id,
      </if>
      <if test="storeCode != null">
        store_code,
      </if>
      <if test="storeName != null">
        store_name,
      </if>
      <if test="storeTypeId != null">
        store_type_id,
      </if>
      <if test="negativeFlag != null">
        negative_flag,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="companyId != null">
        #{companyId,jdbcType=INTEGER},
      </if>
      <if test="branchId != null">
        #{branchId,jdbcType=INTEGER},
      </if>
      <if test="storeId != null">
        #{storeId,jdbcType=INTEGER},
      </if>
      <if test="storeCode != null">
        #{storeCode,jdbcType=NCHAR},
      </if>
      <if test="storeName != null">
        #{storeName,jdbcType=NCHAR},
      </if>
      <if test="storeTypeId != null">
        #{storeTypeId,jdbcType=INTEGER},
      </if>
      <if test="negativeFlag != null">
        #{negativeFlag,jdbcType=BIT},
      </if>
      <if test="address != null">
        #{address,jdbcType=NCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=NCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.xsdPro.model.StoreExample" resultType="java.lang.Integer">
    select count(*) from tbl_store
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tbl_store
    <set>
      <if test="record.companyId != null">
        company_id = #{record.companyId,jdbcType=INTEGER},
      </if>
      <if test="record.branchId != null">
        branch_id = #{record.branchId,jdbcType=INTEGER},
      </if>
      <if test="record.storeId != null">
        store_id = #{record.storeId,jdbcType=INTEGER},
      </if>
      <if test="record.storeCode != null">
        store_code = #{record.storeCode,jdbcType=NCHAR},
      </if>
      <if test="record.storeName != null">
        store_name = #{record.storeName,jdbcType=NCHAR},
      </if>
      <if test="record.storeTypeId != null">
        store_type_id = #{record.storeTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.negativeFlag != null">
        negative_flag = #{record.negativeFlag,jdbcType=BIT},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=NCHAR},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=NCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tbl_store
    set company_id = #{record.companyId,jdbcType=INTEGER},
      branch_id = #{record.branchId,jdbcType=INTEGER},
      store_id = #{record.storeId,jdbcType=INTEGER},
      store_code = #{record.storeCode,jdbcType=NCHAR},
      store_name = #{record.storeName,jdbcType=NCHAR},
      store_type_id = #{record.storeTypeId,jdbcType=INTEGER},
      negative_flag = #{record.negativeFlag,jdbcType=BIT},
      address = #{record.address,jdbcType=NCHAR},
      remark = #{record.remark,jdbcType=NCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.xsdPro.model.Store">
    update tbl_store
    <set>
      <if test="storeCode != null">
        store_code = #{storeCode,jdbcType=NCHAR},
      </if>
      <if test="storeName != null">
        store_name = #{storeName,jdbcType=NCHAR},
      </if>
      <if test="storeTypeId != null">
        store_type_id = #{storeTypeId,jdbcType=INTEGER},
      </if>
      <if test="negativeFlag != null">
        negative_flag = #{negativeFlag,jdbcType=BIT},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=NCHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=NCHAR},
      </if>
    </set>
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.xsdPro.model.Store">
    update tbl_store
    set store_code = #{storeCode,jdbcType=NCHAR},
      store_name = #{storeName,jdbcType=NCHAR},
      store_type_id = #{storeTypeId,jdbcType=INTEGER},
      negative_flag = #{negativeFlag,jdbcType=BIT},
      address = #{address,jdbcType=NCHAR},
      remark = #{remark,jdbcType=NCHAR}
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.example.xsdPro.model.Store">
    <constructor>
      <idArg column="company_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <idArg column="branch_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <idArg column="store_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="store_code" javaType="java.lang.String" jdbcType="NCHAR" />
      <arg column="store_name" javaType="java.lang.String" jdbcType="NCHAR" />
      <arg column="store_type_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="negative_flag" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="address" javaType="java.lang.String" jdbcType="NCHAR" />
      <arg column="remark" javaType="java.lang.String" jdbcType="NCHAR" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    company_id, branch_id, store_id, store_code, store_name, store_type_id, negative_flag, 
    address, remark
  </sql>
  <select id="selectByExample" parameterType="com.example.xsdPro.model.StoreExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tbl_store
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="com.example.xsdPro.model.StoreKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tbl_store
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.example.xsdPro.model.StoreKey">
    delete from tbl_store
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.xsdPro.model.Store">
    insert into tbl_store (company_id, branch_id, store_id, 
      store_code, store_name, store_type_id, 
      negative_flag, address, remark
      )
    values (#{companyId,jdbcType=INTEGER}, #{branchId,jdbcType=INTEGER}, #{storeId,jdbcType=INTEGER}, 
      #{storeCode,jdbcType=NCHAR}, #{storeName,jdbcType=NCHAR}, #{storeTypeId,jdbcType=INTEGER}, 
      #{negativeFlag,jdbcType=BIT}, #{address,jdbcType=NCHAR}, #{remark,jdbcType=NCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.xsdPro.model.Store">
    insert into tbl_store
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="companyId != null">
        company_id,
      </if>
      <if test="branchId != null">
        branch_id,
      </if>
      <if test="storeId != null">
        store_id,
      </if>
      <if test="storeCode != null">
        store_code,
      </if>
      <if test="storeName != null">
        store_name,
      </if>
      <if test="storeTypeId != null">
        store_type_id,
      </if>
      <if test="negativeFlag != null">
        negative_flag,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="companyId != null">
        #{companyId,jdbcType=INTEGER},
      </if>
      <if test="branchId != null">
        #{branchId,jdbcType=INTEGER},
      </if>
      <if test="storeId != null">
        #{storeId,jdbcType=INTEGER},
      </if>
      <if test="storeCode != null">
        #{storeCode,jdbcType=NCHAR},
      </if>
      <if test="storeName != null">
        #{storeName,jdbcType=NCHAR},
      </if>
      <if test="storeTypeId != null">
        #{storeTypeId,jdbcType=INTEGER},
      </if>
      <if test="negativeFlag != null">
        #{negativeFlag,jdbcType=BIT},
      </if>
      <if test="address != null">
        #{address,jdbcType=NCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=NCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.xsdPro.model.StoreExample" resultType="java.lang.Integer">
    select count(*) from tbl_store
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tbl_store
    <set>
      <if test="record.companyId != null">
        company_id = #{record.companyId,jdbcType=INTEGER},
      </if>
      <if test="record.branchId != null">
        branch_id = #{record.branchId,jdbcType=INTEGER},
      </if>
      <if test="record.storeId != null">
        store_id = #{record.storeId,jdbcType=INTEGER},
      </if>
      <if test="record.storeCode != null">
        store_code = #{record.storeCode,jdbcType=NCHAR},
      </if>
      <if test="record.storeName != null">
        store_name = #{record.storeName,jdbcType=NCHAR},
      </if>
      <if test="record.storeTypeId != null">
        store_type_id = #{record.storeTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.negativeFlag != null">
        negative_flag = #{record.negativeFlag,jdbcType=BIT},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=NCHAR},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=NCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tbl_store
    set company_id = #{record.companyId,jdbcType=INTEGER},
      branch_id = #{record.branchId,jdbcType=INTEGER},
      store_id = #{record.storeId,jdbcType=INTEGER},
      store_code = #{record.storeCode,jdbcType=NCHAR},
      store_name = #{record.storeName,jdbcType=NCHAR},
      store_type_id = #{record.storeTypeId,jdbcType=INTEGER},
      negative_flag = #{record.negativeFlag,jdbcType=BIT},
      address = #{record.address,jdbcType=NCHAR},
      remark = #{record.remark,jdbcType=NCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.xsdPro.model.Store">
    update tbl_store
    <set>
      <if test="storeCode != null">
        store_code = #{storeCode,jdbcType=NCHAR},
      </if>
      <if test="storeName != null">
        store_name = #{storeName,jdbcType=NCHAR},
      </if>
      <if test="storeTypeId != null">
        store_type_id = #{storeTypeId,jdbcType=INTEGER},
      </if>
      <if test="negativeFlag != null">
        negative_flag = #{negativeFlag,jdbcType=BIT},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=NCHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=NCHAR},
      </if>
    </set>
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.xsdPro.model.Store">
    update tbl_store
    set store_code = #{storeCode,jdbcType=NCHAR},
      store_name = #{storeName,jdbcType=NCHAR},
      store_type_id = #{storeTypeId,jdbcType=INTEGER},
      negative_flag = #{negativeFlag,jdbcType=BIT},
      address = #{address,jdbcType=NCHAR},
      remark = #{remark,jdbcType=NCHAR}
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.example.xsdPro.model.Store">
    <constructor>
      <idArg column="company_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <idArg column="branch_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <idArg column="store_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="store_code" javaType="java.lang.String" jdbcType="NCHAR" />
      <arg column="store_name" javaType="java.lang.String" jdbcType="NCHAR" />
      <arg column="store_type_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="negative_flag" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="address" javaType="java.lang.String" jdbcType="NCHAR" />
      <arg column="remark" javaType="java.lang.String" jdbcType="NCHAR" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    company_id, branch_id, store_id, store_code, store_name, store_type_id, negative_flag, 
    address, remark
  </sql>
  <select id="selectByExample" parameterType="com.example.xsdPro.model.StoreExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tbl_store
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="com.example.xsdPro.model.StoreKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tbl_store
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.example.xsdPro.model.StoreKey">
    delete from tbl_store
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.xsdPro.model.Store">
    insert into tbl_store (company_id, branch_id, store_id, 
      store_code, store_name, store_type_id, 
      negative_flag, address, remark
      )
    values (#{companyId,jdbcType=INTEGER}, #{branchId,jdbcType=INTEGER}, #{storeId,jdbcType=INTEGER}, 
      #{storeCode,jdbcType=NCHAR}, #{storeName,jdbcType=NCHAR}, #{storeTypeId,jdbcType=INTEGER}, 
      #{negativeFlag,jdbcType=BIT}, #{address,jdbcType=NCHAR}, #{remark,jdbcType=NCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.xsdPro.model.Store">
    insert into tbl_store
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="companyId != null">
        company_id,
      </if>
      <if test="branchId != null">
        branch_id,
      </if>
      <if test="storeId != null">
        store_id,
      </if>
      <if test="storeCode != null">
        store_code,
      </if>
      <if test="storeName != null">
        store_name,
      </if>
      <if test="storeTypeId != null">
        store_type_id,
      </if>
      <if test="negativeFlag != null">
        negative_flag,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="companyId != null">
        #{companyId,jdbcType=INTEGER},
      </if>
      <if test="branchId != null">
        #{branchId,jdbcType=INTEGER},
      </if>
      <if test="storeId != null">
        #{storeId,jdbcType=INTEGER},
      </if>
      <if test="storeCode != null">
        #{storeCode,jdbcType=NCHAR},
      </if>
      <if test="storeName != null">
        #{storeName,jdbcType=NCHAR},
      </if>
      <if test="storeTypeId != null">
        #{storeTypeId,jdbcType=INTEGER},
      </if>
      <if test="negativeFlag != null">
        #{negativeFlag,jdbcType=BIT},
      </if>
      <if test="address != null">
        #{address,jdbcType=NCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=NCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.xsdPro.model.StoreExample" resultType="java.lang.Integer">
    select count(*) from tbl_store
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tbl_store
    <set>
      <if test="record.companyId != null">
        company_id = #{record.companyId,jdbcType=INTEGER},
      </if>
      <if test="record.branchId != null">
        branch_id = #{record.branchId,jdbcType=INTEGER},
      </if>
      <if test="record.storeId != null">
        store_id = #{record.storeId,jdbcType=INTEGER},
      </if>
      <if test="record.storeCode != null">
        store_code = #{record.storeCode,jdbcType=NCHAR},
      </if>
      <if test="record.storeName != null">
        store_name = #{record.storeName,jdbcType=NCHAR},
      </if>
      <if test="record.storeTypeId != null">
        store_type_id = #{record.storeTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.negativeFlag != null">
        negative_flag = #{record.negativeFlag,jdbcType=BIT},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=NCHAR},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=NCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tbl_store
    set company_id = #{record.companyId,jdbcType=INTEGER},
      branch_id = #{record.branchId,jdbcType=INTEGER},
      store_id = #{record.storeId,jdbcType=INTEGER},
      store_code = #{record.storeCode,jdbcType=NCHAR},
      store_name = #{record.storeName,jdbcType=NCHAR},
      store_type_id = #{record.storeTypeId,jdbcType=INTEGER},
      negative_flag = #{record.negativeFlag,jdbcType=BIT},
      address = #{record.address,jdbcType=NCHAR},
      remark = #{record.remark,jdbcType=NCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.xsdPro.model.Store">
    update tbl_store
    <set>
      <if test="storeCode != null">
        store_code = #{storeCode,jdbcType=NCHAR},
      </if>
      <if test="storeName != null">
        store_name = #{storeName,jdbcType=NCHAR},
      </if>
      <if test="storeTypeId != null">
        store_type_id = #{storeTypeId,jdbcType=INTEGER},
      </if>
      <if test="negativeFlag != null">
        negative_flag = #{negativeFlag,jdbcType=BIT},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=NCHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=NCHAR},
      </if>
    </set>
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.xsdPro.model.Store">
    update tbl_store
    set store_code = #{storeCode,jdbcType=NCHAR},
      store_name = #{storeName,jdbcType=NCHAR},
      store_type_id = #{storeTypeId,jdbcType=INTEGER},
      negative_flag = #{negativeFlag,jdbcType=BIT},
      address = #{address,jdbcType=NCHAR},
      remark = #{remark,jdbcType=NCHAR}
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.example.xsdPro.model.Store">
    <constructor>
      <idArg column="company_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <idArg column="branch_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <idArg column="store_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="store_code" javaType="java.lang.String" jdbcType="NCHAR" />
      <arg column="store_name" javaType="java.lang.String" jdbcType="NCHAR" />
      <arg column="store_type_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="negative_flag" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="address" javaType="java.lang.String" jdbcType="NCHAR" />
      <arg column="remark" javaType="java.lang.String" jdbcType="NCHAR" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    company_id, branch_id, store_id, store_code, store_name, store_type_id, negative_flag, 
    address, remark
  </sql>
  <select id="selectByExample" parameterType="com.example.xsdPro.model.StoreExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tbl_store
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="com.example.xsdPro.model.StoreKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tbl_store
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.example.xsdPro.model.StoreKey">
    delete from tbl_store
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.xsdPro.model.Store">
    insert into tbl_store (company_id, branch_id, store_id, 
      store_code, store_name, store_type_id, 
      negative_flag, address, remark
      )
    values (#{companyId,jdbcType=INTEGER}, #{branchId,jdbcType=INTEGER}, #{storeId,jdbcType=INTEGER}, 
      #{storeCode,jdbcType=NCHAR}, #{storeName,jdbcType=NCHAR}, #{storeTypeId,jdbcType=INTEGER}, 
      #{negativeFlag,jdbcType=BIT}, #{address,jdbcType=NCHAR}, #{remark,jdbcType=NCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.xsdPro.model.Store">
    insert into tbl_store
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="companyId != null">
        company_id,
      </if>
      <if test="branchId != null">
        branch_id,
      </if>
      <if test="storeId != null">
        store_id,
      </if>
      <if test="storeCode != null">
        store_code,
      </if>
      <if test="storeName != null">
        store_name,
      </if>
      <if test="storeTypeId != null">
        store_type_id,
      </if>
      <if test="negativeFlag != null">
        negative_flag,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="companyId != null">
        #{companyId,jdbcType=INTEGER},
      </if>
      <if test="branchId != null">
        #{branchId,jdbcType=INTEGER},
      </if>
      <if test="storeId != null">
        #{storeId,jdbcType=INTEGER},
      </if>
      <if test="storeCode != null">
        #{storeCode,jdbcType=NCHAR},
      </if>
      <if test="storeName != null">
        #{storeName,jdbcType=NCHAR},
      </if>
      <if test="storeTypeId != null">
        #{storeTypeId,jdbcType=INTEGER},
      </if>
      <if test="negativeFlag != null">
        #{negativeFlag,jdbcType=BIT},
      </if>
      <if test="address != null">
        #{address,jdbcType=NCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=NCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.xsdPro.model.StoreExample" resultType="java.lang.Integer">
    select count(*) from tbl_store
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tbl_store
    <set>
      <if test="record.companyId != null">
        company_id = #{record.companyId,jdbcType=INTEGER},
      </if>
      <if test="record.branchId != null">
        branch_id = #{record.branchId,jdbcType=INTEGER},
      </if>
      <if test="record.storeId != null">
        store_id = #{record.storeId,jdbcType=INTEGER},
      </if>
      <if test="record.storeCode != null">
        store_code = #{record.storeCode,jdbcType=NCHAR},
      </if>
      <if test="record.storeName != null">
        store_name = #{record.storeName,jdbcType=NCHAR},
      </if>
      <if test="record.storeTypeId != null">
        store_type_id = #{record.storeTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.negativeFlag != null">
        negative_flag = #{record.negativeFlag,jdbcType=BIT},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=NCHAR},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=NCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tbl_store
    set company_id = #{record.companyId,jdbcType=INTEGER},
      branch_id = #{record.branchId,jdbcType=INTEGER},
      store_id = #{record.storeId,jdbcType=INTEGER},
      store_code = #{record.storeCode,jdbcType=NCHAR},
      store_name = #{record.storeName,jdbcType=NCHAR},
      store_type_id = #{record.storeTypeId,jdbcType=INTEGER},
      negative_flag = #{record.negativeFlag,jdbcType=BIT},
      address = #{record.address,jdbcType=NCHAR},
      remark = #{record.remark,jdbcType=NCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.xsdPro.model.Store">
    update tbl_store
    <set>
      <if test="storeCode != null">
        store_code = #{storeCode,jdbcType=NCHAR},
      </if>
      <if test="storeName != null">
        store_name = #{storeName,jdbcType=NCHAR},
      </if>
      <if test="storeTypeId != null">
        store_type_id = #{storeTypeId,jdbcType=INTEGER},
      </if>
      <if test="negativeFlag != null">
        negative_flag = #{negativeFlag,jdbcType=BIT},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=NCHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=NCHAR},
      </if>
    </set>
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.xsdPro.model.Store">
    update tbl_store
    set store_code = #{storeCode,jdbcType=NCHAR},
      store_name = #{storeName,jdbcType=NCHAR},
      store_type_id = #{storeTypeId,jdbcType=INTEGER},
      negative_flag = #{negativeFlag,jdbcType=BIT},
      address = #{address,jdbcType=NCHAR},
      remark = #{remark,jdbcType=NCHAR}
    where company_id = #{companyId,jdbcType=INTEGER}
      and branch_id = #{branchId,jdbcType=INTEGER}
      and store_id = #{storeId,jdbcType=INTEGER}
  </update>
</mapper>